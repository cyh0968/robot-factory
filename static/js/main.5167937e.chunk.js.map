{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","robot","id","name","email","CardList","robots","map","SearchBox","placeholder","handleChange","type","onChange","App","event","setState","searchFiled","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAIaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,MAAMC,GAAtC,4BACpB,mCAAML,EAAMI,MAAME,KAAlB,OACA,kCAAKN,EAAMI,MAAMG,MAAjB,YCFKC,EAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,OAAOC,KAAI,SAACN,GAAD,OACd,cAAC,EAAD,CAAqBA,MAAOA,GAAjBA,EAAMC,UCLhBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCiCHG,G,wDAlCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXb,OAAQ,GACRU,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,OAAQkB,S,+BAOjC,IAAD,EACyBC,KAAKN,MAA7Bb,EADD,EACCA,OAAQU,EADT,EACSA,YACVU,EAAiBpB,EAAOqB,QAAO,SAAA1B,GAAK,OACxCA,EAAME,KAAKyB,cAAcC,SAASb,EAAYY,kBAEhD,OACE,sBAAK9B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWW,YAAY,uBAAuBC,aAAce,KAAKf,eACjE,cAAC,EAAD,CAAUJ,OAAQoB,W,GA7BRI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5167937e.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = (props) => (\n    <div className=\"card-container\">\n        <img alt='robot' src={`https://robohash.org/${props.robot.id}?set=set1&size=180x180`}></img>\n        <h2> {props.robot.name} </h2>\n        <p> {props.robot.email} </p>\n    </div>\n);\n","import React from 'react';\n\nimport './card-list.styles.css';\n\nimport { Card } from '../card/card.component';\n\nexport const CardList = (props) => (\n    <div className=\"card-list\">\n        {props.robots.map((robot) => (\n            <Card key={robot.id} robot={robot}></Card>\n        ))}\n    </div>\n);\n","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n);\n","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      robots: [],\n      searchFiled: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n\n  handleChange = (event) => {\n    this.setState({ searchFiled: event.target.value })\n  }\n\n  render() {\n    const { robots, searchFiled } = this.state;\n    const filteredRobots = robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchFiled.toLowerCase())\n    )\n    return (\n      <div className='App'>\n        <h1> Robot Factory </h1>\n        <SearchBox placeholder='search robot friends' handleChange={this.handleChange} />\n        <CardList robots={filteredRobots} />\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}